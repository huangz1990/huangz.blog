Go 唯一无二的大括号放置风格
===================================

.. note::

    本文摘录自即将出版的《Go语言趣学指南》，
    请访问 `gpwgcn.com <http://gpwgcn.com>`_  以获取更多相关信息。

----

代码清单 1-1 与 Go Playground 的初次见面： ``playground.go``

.. code-block:: go

    package main                            // 声明本代码所属的包

    import (
        "fmt"                               // 导入 fmt 包，使其可用（fmt是format的缩写）
    )

    func main() {                           // 声明一个名为 main 的函数
        fmt.Println("Hello, playground")    // 在屏幕上打印出“Hello, playground”
    }

----

Go 对于大括号 ``{}`` 的摆放位置非常挑剔。 在代码清单 1-1 中，左大括号
``{`` 跟 ``func`` 关键字位于同一行，而右大括号 ``}`` 则独占一行。 这是
Go
语言\ *唯一允许的大括号放置风格*\ ，除此之外的其他风格都是不被允许的。
作为参考，\ `mng.bz/NdE2 <http://mng.bz/NdE2>`__
展示了各种不同的大括号放置风格。

Go
之所以如此严格地限制大括号的放置风格，跟这门语言刚刚诞生时发生的一些事情有关。
在早期，使用 Go
编写的代码总是无一幸免地带有分号，它们就像迷路的小狗一样跟在每条单独的语句后面，比如这样：

.. code:: go

   fmt.Println("Hello, fire hydrant");

到了 2009 年 12 月，一群忍者 gopher 决定把分号从语言中驱逐出去。
好吧，这么说也不太准确。 实际上，Go
编译器将为你代劳，自动地插入那些可爱的分号。
这种机制运行得非常完美，但它的代价就是要求用户必须遵守上面提到的\ *唯一无二的大括号放置风格*\ 。

.. image:: image/kongfu_gopher.jpg
   :align: right

如果用户尝试将左大括号和 ``func`` 关键字放在不同的行里面，那么 Go
将报告一个语法错误：

--------------

.. code:: go

   func main()      // 函数体缺失
   {                // 语法错误：在 { 之前发现了意料之外的分号或新行
   }

--------------

出现这个问题并不是编译器有意刁难，这纯粹是由于分号被插入到了错误的位置，导致编译器犯了点小迷糊，最终才不得不求助于你。

   {提示}

   在阅读本书的时候，
   亲力亲为、不厌其烦地键入书中展示的每段代码将是一个不错的主意。
   这样一来， 如果你键入了错误的代码， 那么就会看到相应的语法错误，
   但这并不是一件坏事。
   能够阅读、理解并纠正代码中的错误是一种至关重要的技能，
   而且坚持不懈也是一种宝贵的品质。

..

   {速查 1-4}

   用户必须将左大括号 ``{`` 置于何处才能避免引起语法错误？

..

   {速查 1-4 答案}

   左大括号必须与 ``func`` 关键字位于同一行而不是独占一行， 这是 Go
   语言唯一允许的大括号放置风格。


